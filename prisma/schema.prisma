datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ColorMode {
  light
  dark
}

model Preference {
  id                    Int         @id @default(autoincrement())
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  colorMode             ColorMode   @default(dark)
}

model Trip {
  id                    Int       @id @default(autoincrement()) @unique
  createdAt             DateTime  @default(now())
  updatedAt             String?
  confirmed             Boolean   @default(false)
  date                  String
  pickupTime            String
  passengerName         String
  passengerPhone        String
  pickupAddressName     String?
  pickupAddressUnit     String?
  pickupAddressStreet   String
  pickupAddressCity     String
  dropOffAddressName    String?
  dropOffAddressUnit    String?
  dropOffAddressStreet  String
  dropOffAddressCity    String
  dropOffTime           String?
  notes                 String?
  closed                Boolean    @default(false)

  Stops                 Stop[]
  CompletionNotes       CompletionNote[]
  CancelationNotes      CancelationNote[]

	@@map("trips")
}

model CompletionNote {
  id                    Int       @id @default(autoincrement()) @unique
  createdAt             DateTime  @default(now())
  updatedAt             String?
  tripId                Int
  notes                 String?

  Trips                 Trip     @relation(fields: [tripId], references: [id])

  @@map("completion_notes")
}

model CancelationNote {
  id                    Int       @id @default(autoincrement()) @unique
  createdAt             DateTime  @default(now())
  updatedAt             String?
  tripId                Int
  cancelationType       String
  notes                 String?

  Trips                 Trip     @relation(fields: [tripId], references: [id])

  @@map("cancelation_notes")
}

model Stop {
  // PK
  id                    Int       @id @default(autoincrement()) @unique
  // FK
  tripId                Int
  // System
  createdAt             DateTime  @default(now())
  updatedAt             String?
  // Data
  stopAddressName       String?
  stopAddressUnit       String?
  stopAddressStreet     String
  stopAddressCity       String
  arrivalTime           String
  departureTime         String
  notes                 String?
  // Relations
  Trips                 Trip     @relation(fields: [tripId], references: [id])
  @@map("stops")
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ColorScheme {
  System
  Dark
  Light
}

enum VehicleType {
  SUV
  Van
  Compact
  Luxury
  Sadan
  Other
}

enum VehicleFuelType {
  Gasoline
  Diesel
  Electric
  Hybrid
  PluginHybrid
  Propane
  Hydrogen
  CNG
  Other
}

enum UserRole {
  SuperAdmin
  Admin
  Driver
}

// TODO Create your Invite Token model.

model User {
  id          String         @id @unique
  session     Session[]
  Key         Key[]

  username    String         @unique
  Role        UserRole       @default(Driver) @map("role")
  UserDetails UserDetails[]

  @@map("user")
}

// You can only add custom fields to the user model. The session model is managed by Lucia, so you can not add custom fields to it.
model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

// You can only add custom fields to the user model. The key model is managed by Lucia, so you can not add custom fields to it.
model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  expires         BigInt?
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model UserDetails {
  id            String          @id @unique
  user_id       String
  name          String
  email         String          @unique
  phone         String          @unique
  color_scheme  ColorScheme
  vehicle_type  VehicleType
  vehicle_fuel  VehicleFuelType
  vehicle_color String
  user          User            @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("user_details")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

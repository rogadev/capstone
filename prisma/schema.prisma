// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ColorScheme {
  System
  Dark
  Light
}

enum VehicleType {
  SUV
  Van
  Compact
  Luxury
  Sedan
  Other
}

enum VehicleFuelType {
  Gasoline
  Diesel
  Electric
  Hybrid
  PluginHybrid
  Propane
  Hydrogen
  CNG
  Other
}

enum UserRole {
  SuperAdmin
  Admin
  Driver
}

enum RequestStatus {
  Pending
  Approved
  Rejected
  Cancelled
  Completed
}

model User {
  id      String    @id @unique
  session Session[]
  Key     Key[]

  username    String       @unique
  Role        UserRole     @default(Driver) @map("role")
  UserDetails UserDetails?
  Trips       Trip[]
  Payable     Payable[]

  @@map("user")
}

// You can only add custom fields to the user model. The session model is managed by Lucia, so you can not add custom fields to it.
model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

// You can only add custom fields to the user model. The key model is managed by Lucia, so you can not add custom fields to it.
model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  expires         BigInt?
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model UserDetails {
  id           String      @id @unique
  user_id      String      @unique
  name         String
  email        String      @unique
  phone        String      @unique
  color_scheme ColorScheme
  user         User        @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("user_details")
}

model Vehicle {
  id             Int             @id @unique @default(autoincrement()) @map("vehicle_id")
  created_by     String
  date_added     DateTime
  last_updated   DateTime
  name           String
  description    String?
  make           String
  model          String
  year           Int
  type           VehicleType
  fuel_type      VehicleFuelType
  departing_from String

  @@map("vehicle")
}

model TripRequest {
  id              Int      @id @default(autoincrement())
  billingName     String
  billingAddress  String
  billingAddress2 String?
  billingCity     String
  billingProvince String   @default("BC")
  billingPostal   String
  billingPhone    String
  billingEmail    String
  passengerName   String
  passengerEmail  String?
  passengerPhone  String
  pickupName      String?
  pickupAddress   String
  pickupCity      String
  pickupDate      DateTime
  pickupTime      String
  dropOffName     String?
  dropOffAddress  String
  dropOffCity     String
  dropOffTime     String
  wheelchair      Boolean  @default(false)
  walker          Boolean  @default(false)
  blind           Boolean  @default(false)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BillingDetails {
  id         Int     @id @default(autoincrement())
  name       String
  address    String
  address2   String?
  city       String
  province   String  @default("BC")
  postalCode String
  phone      String
  email      String
  Trips      Trip[]

  @@map("billing_details")
}

model Passenger {
  id         Int     @id @default(autoincrement())
  name       String
  email      String?
  phone      String
  wheelchair Boolean @default(false)
  walker     Boolean @default(false)
  blind      Boolean @default(false)
  Trips      Trip[]

  @@map("passenger")
}

model Trip {
  id               Int             @id @default(autoincrement())
  pickupTripId     Int?
  dropoffTripId    Int?
  pickupLocation   String?
  pickupAddress    String
  pickupCity       String
  pickupDate       DateTime
  pickupTime       String
  dropoffLocation  String?
  dropoffAddress   String
  dropoffCity      String
  dropoffTime      String
  wheelchair       Boolean         @default(false)
  walker           Boolean         @default(false)
  blind            Boolean         @default(false)
  notes            String?
  completed        Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Driver           User            @relation(fields: [driverId], references: [id])
  driverId         String
  Passenger        Passenger?      @relation(fields: [passengerId], references: [id])
  passengerId      Int?
  BillingDetails   BillingDetails? @relation(fields: [billingDetailsId], references: [id])
  billingDetailsId Int?
  TripStops        TripStop[]
  Billable         Billable[]
  Payable          Payable[]
  Location         Location?       @relation(fields: [locationId], references: [id])
  locationId       Int?

  @@map("trip")
}

model TripStop {
  id       Int      @id @default(autoincrement())
  type     String
  location String?
  address  String
  city     String
  date     DateTime
  time     String
  Trip     Trip     @relation(fields: [tripId], references: [id])
  tripId   Int

  @@map("trip_stop")
}

model Billable {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  Trip        Trip     @relation(fields: [tripId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tripId      Int

  @@map("billable")
}

model Payable {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  Driver      User     @relation(fields: [userId], references: [id])
  Trip        Trip     @relation(fields: [tripId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  tripId      Int

  @@map("payable")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String?
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Trips     Trip[]

  @@map("location")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ColorScheme {
  System
  Dark
  Light
}

enum VehicleType {
  SUV
  Van
  Compact
  Luxury
  Sadan
  Other
}

enum VehicleFuelType {
  Gasoline
  Diesel
  Electric
  Hybrid
  PluginHybrid
  Propane
  Hydrogen
  CNG
  Other
}

enum UserRole {
  SuperAdmin
  Admin
  Driver
}

// TODO Create your Invite Token model.

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  username      String?       @unique
  fullName      String
  email         String       @unique
  emailVerified Boolean      @default(false)
  verifiedAt    DateTime?
  image         String?
  role          UserRole      @default(Driver)
  accounts      Account[]
  sessions      Session[]
  vehicles      Vehicle[]
  settings      UserSettings?
}

model UserSettings {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String      @unique @db.Uuid
  onboarded   Boolean     @default(false)
  colorScheme ColorScheme @default(System)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text @map("refreshToken")
  access_token      String? @db.Text @map("accessToken")
  expires_in        Int?    @map("expiresIn")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @db.Text @map("idToken")
  session_state     String? @map("sessionState")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Vehicle {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String        @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String
  make          String
  model         String
  year          Int
  type          VehicleType
  fuelType      VehicleFuelType
  fuelEconomy   Float
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

